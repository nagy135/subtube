#!/bin/sh

PREFIX=/usr/share/subtube/resources

# list of seen video hashes
SEEN="$PREFIX/seen.lst"

# storage of data regarding subscribed channels
SUBSCRIBES="$PREFIX/subscribes"

# location of thumbnails
THUMBNAILS="$PREFIX/thumbnails"

# pidfile (update in progress)
PIDFILE=/tmp/subtube_update.pid

# variables for XOB (progress bar)
fifo=/tmp/subtube.fifo
progressbar_pid=-1

check_dep(){
    if command -v "$1" >/dev/null; then
        echo "$1"
    else
        echo ":"
    fi
}

noti="$(check_dep notify-send)"
img_view="$(check_dep nsxiv)"
[ "$img_view" = ":" ] && img_view="sxiv"

die(){
    [ -n "$1" ] && printf "%s\n" "$*" >&2
    exit 1
}

add_subscriber(){
    echo "$1" >> "$SUBSCRIBES"
}

metadata(){
    id=$(echo "$2" | sed "s/.*\/// ; s/\.jpg//")
    url="https://www.youtube.com/watch?v=$id"
    TITLE=$(youtube-dl -e "$url")

    [ "$1" = "name" ] && $noti -i "$2" "$TITLE" && exit 0
    duration=$(youtube-dl --get-duration "$url")
    $noti -i "$2" "$TITLE" "$duration"
}

update(){
    # internet verification
    if ! wget -q --spider http://google.com; then
        $noti -t 4000 -i 'none' -u critical "Subtube" "No internet connection"
        exit 1
    fi

    # avoid running twice at the same time
    if [ -f $PIDFILE ]; then
        $noti -i 'none' -u critical -t 2000 "Subtube" "Update already in progress, wait..."
        exit 0
    else
        touch "$PIDFILE"
    fi

    # cleanup if terminated by user
    trap "rm $PIDFILE" INT TERM

    # initialize progress bar (xob)
    [ $1 != "secret" ] && progress_bar -d

    # init loop variables
    sub_i=0
    subcount=$(wc -l < "$SUBSCRIBES")

    # loop over subscribed urls
    while read -r line; do
        sub_i=$((sub_i+1))

        # notify progress
        [ $1 != "secret" ] && progress_bar $sub_i "$subcount" 30

        # get first 10 video hashes parsed from youtube video page
        vid_ids=$(curl -s "$line" \
            | grep ytInitialData \
            | head -n 1 \
            | sed 's/;$// ; s/window\["ytInitialData"\]\s*=\s*// ; s/.*var ytInitialData = //' \
            | jq -r ".contents\
            .twoColumnBrowseResultsRenderer\
            .tabs[1]\
            .tabRenderer\
            .content\
            .sectionListRenderer\
            .contents[0]\
            .itemSectionRenderer\
            .contents[0]\
            .gridRenderer\
            .items\
            | .[].gridVideoRenderer.videoId" \
            2> /dev/null \
            | head)

        # loop over hashes
        echo "$vid_ids" | while read -r vid_id; do

            # filter out already seen ones
            if grep -qe "$vid_id" "$SEEN"; then continue; fi

            # if problem occured during parsing 
            [ -z "$vid_id" ] && echo "error parsing given url: $line" && continue

            [ "$1" != "init" ] && get_thumbnail "$vid_id"
            echo "$vid_id" >> $SEEN
            [ "$1" = "init" ] && continue

            # get video metadata
            url="https://www.youtube.com/watch?v=$vid_id"
            title=$(youtube-dl -e "$url")
            duration=$(youtube-dl --get-duration "$url")

            $noti -i 'none' -t 3000 "$title" "$duration" -u critical -i "$THUMBNAILS/$vid_id.jpg"
        done


    done < "$SUBSCRIBES"

    # kill progress bar
    if [ $1 != "secret" ]; then
        $noti -i 'none' -t 3000 "Subtube" "$(find "$THUMBNAILS" -type f | wc -l) unseen video(s)"
        progress_bar -k
    fi

    # update finished, remove update flag
    rm "$PIDFILE"
}

# 1st argument: thumbnails folder
# 2st argument: play with browser|handler
# 3st argument: handler
play(){
    # this parts serves as override of THUMBNAILS folder
    thumbnails="$THUMBNAILS"
    [ -n "$1" ] && thumbnails="$1"


    chosen=$("$img_view" -tbop "$thumbnails" || $noti -i 'none' -t 3000 "Subtube" "No videos to play")

    if [ -z $chosen ]; then
        [ -z $1 ] \
            && exit \
            || return
    fi

    count=$(echo "$chosen" | wc -l)
    i=1
    echo "$chosen" | while read -r choice; do
        # first move it so that its 'removed' instantly
        file_name=$(basename "$choice")
        mv "$choice" "/tmp/$file_name"
        choice="/tmp/$file_name"

        # get video hash
        id=$(echo "$choice" | sed "s/.*\/// ; s/\.jpg//")
        if [ $count -eq 1 ]; then
            notify_name "Playing" "$id" "$choice"
        else
            notify_name "Playing $i/$count" "$id" "$choice"
            i=$((i+1))
        fi
        rm "$choice"

        url="https://www.youtube.com/watch?v=$id"
        TITLE=$(youtube-dl -e "$url")

        # integration with mpv_history, script of mine storing every seen video
        [ -f "$HOME/.local/share/qutebrowser/mpv_history" ] && echo "$TITLE($url)" >> ~/.local/share/qutebrowser/mpv_history

        if [ "$2" = "browser" ]; then
            if [ -z "${BROWSER+x}" ]; then
                for browser in \
                    chromium \
                    chrome \
                    google-chrome-stable \
                    google-chrome-unstable \
                    google-chrome-beta \
                    firefox \
                    firefox-nightly
                do
                    command -v $browser >/dev/null 2>&1 \
                        && echo "playing with $browser" \
                        && $browser "$url" \
                        && break
                done
            else
                $BROWSER "$url"
            fi
        elif [ "$2" = "handler" ]; then
            $3 "$url" &
        else
            # try to play it until it works (maximum 3 times)
            # mpv has youtube-dl hook and sometimes it works on second try.
            # if 3 times is not enough, you probably just need to update your
            # local youtube-dl (python -m pip install --upgrade youtube-dl)
            n=0
            until [ "$n" -ge 3 ]
            do
                [ "$n" -ge 1 ] && $noti -t 1000 "MPV" "retry $n"
                mpv "$url" >/dev/null 2>&1 && break
                n=$((n+1)) 
                sleep 2
            done
        fi
    done
}

notify_name(){
    title=$(youtube-dl -e "https://www.youtube.com/watch?v=$2")
    $noti -i "$3" -t 4000 "$1" "$title"

}

# 1st argument switch [clean|newest]
time_selection(){
    sel_type=$1
    shift

    # make sure folder exists
    tmp_thumbnails="/tmp/tmp_thumbnails_$sel_type"
    mkdir -p "$tmp_thumbnails"

    # set find flags
    flag="-mtime"
    argument=+$1
    [ "$sel_type" = "newest" ] \
        && flag="-mmin" \
        && argument="-$1"

    # move all older than N days into the directory
    find "$THUMBNAILS" \
        $flag "$argument" \
        -type f \
        -exec mv -t "$tmp_thumbnails" {} +

    # perform (n)sxiv selection
    if [ "$sel_type" = "newest" ]; then
        play "$tmp_thumbnails"
    else
        chosen=$("$img_view" -tbop "$tmp_thumbnails" || $noti -i 'none' -t 2000 "Subtube" "No video deleted")
        [ -n "$chosen" ] && rm "$chosen"
    fi

    # move rest back
    mv "$tmp_thumbnails"/* "$THUMBNAILS" 2> /dev/null

    # remove empty folder
    rmdir "$tmp_thumbnails"
}

get_thumbnail(){
    wget -cq "https://i3.ytimg.com/vi/$1/hqdefault.jpg" >/dev/null 2>&1 -O "$THUMBNAILS/$1.jpg"
}

progress_bar(){
    command -v wob >/dev/null || return
    if [ "$1" = '-d']; then
        mkfifo $fifo
        chmod 766 $fifo
        subcount=$(wc -l < "$SUBSCRIBES")
        tail -f $fifo | wob -t 5000 -a bottom -m "$subcount" &> /dev/null &
        progressbar_pid=$!
    elif [ "$1" = '-k' ]; then
        rm $fifo
        kill $progressbar_pid
        pkill -f "tail -f $fifo"
    else
        echo "$1" > $fifo
    fi
}

if [ "$1" = 'update' ]; then
    arg=""
    if [ "$2" = "-s" ] || [ "$2" = "--secret" ]; then
        arg="secret"
    fi
    update $arg
elif [ "$1" = 'init' ]; then
    update init
elif [ "$1" = 'play' ]; then
    arg=""
    if [ "$2" = "-b" ] || [ "$2" = "--browser" ]; then
        arg="browser"
    fi
    if [ "$2" = "-h" ] || [ "$2" = "--handler" ]; then
        [ $# -lt 3 ] && die "you need to specify handler"
        play "" "handler" "$3"
    else
        play "" $arg
    fi
elif [ "$1" = 'clean' ]; then
    [ $# -lt 2 ] && die "Pass number that specifies how many days" \
        "old videos to keep (delete older)"
    time_selection clean "$2"
elif [ "$1" = 'newest' ]; then
    [ $# -lt 2 ] && die "Pass number that specifies how many minutes" \
        "old videos to show (for playing)"
    time_selection newest "$2"
elif [ "$1" = 'add' ]; then
    [ $# -lt 2 ] && die "Pass url to videos page!"
    add_subscriber "$2"
elif [ "$1" = 'name' ]; then
    [ $# -lt 2 ] && die "Pass path to file with video id!"
    metadata name "$2"
elif [ "$1" = 'name_length' ]; then
    [ $# -lt 2 ] && die "Pass path to file with video id!"
    metadata name_length "$2"
else
    echo "Usage: subtube [OPTION]"
    echo "Youtube interface without browser"
    echo ""
    echo "Options:"
    echo "  -h, --help                 show this message and quit"
    echo "  update                     update database"
    echo "    --secret                 update database without notifications (for crontab)"
    echo "    -s                       alias --secret"
    echo "  play                       sxiv picking dialog for playing all marked videos"
    echo "    --browser                play with your browser instead (guess or use \$BROWSER)"
    echo "    -b                       alias --browser"
    echo '    --handler [handler]      play with custom handler (wrap in quotes)'
    echo "    -h [handler]             alias --handler"
    echo "  init                       dont download thumbnails - for first time"
    echo "  name path_to_file          notify-send video title"
    echo "  name_length path_to_file   notify-send video title (with length)"
    echo "  clean N                    select videos older than N days to delete"
    echo "  newest N                   select videos more recent than N minutes to choose from"
    echo "  add [url]                   add subscriber (video page url of youtube channel)"
fi
